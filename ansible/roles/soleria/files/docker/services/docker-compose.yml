version : "3.8"

networks:
  reverseProxy: {}

volumes:
  nginx_config: {}

services:
## to check if it's working curl https://api.nordvpn.com/vpn/check/full
  nordvpn:
    container_name: nordvpn
    image: bubuntux/nordlynx:latest
    restart: always
    networks:
      - reverseProxy
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    ports:
      - 9117:9117 #jacket
      - 7878:7878 #radarr
      - 7877:7877 #radarrStandups
      - 8989:8989 #sonarr
      - 9091:9091 #transmission ui
      - 51413:51413 #transmission torrent port tcp
      - 51413:51413/udp #transmission torrent port udp
      - 5076:5076 #nzb hydra
      - 8081:8080 #sabnzb
      - 8686:8686 #lidarr
      - 6767:6767 #bazarr
      - 9696:9696 #prowlarr
    environment:
      - PRIVATE_KEY=${NORDVPNPRIVATE_KEY}
      - TZ=${TZ}
      - NET_LOCAL=${LOCALNETWORKCIDR}

  jackett:
    image: linuxserver/jackett:latest
    container_name: "jackett"
    restart: always
    volumes:
      - ${DOCKERDIR}/jackett:/config
      - ${DOCKERDIR}/shared:/shared
      - /storage/data/torrents/watch:/downloads # this is for adhoc torrent files downloaded via jackett interface rather than arr's
      - "/etc/localtime:/etc/localtime:ro"
    network_mode: service:nordvpn #9117
    depends_on:
      - nordvpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.jackett.rule=Host(`jackett.soleria.net`)
      - traefik.http.routers.jackett.tls.certresolver=le
      - traefik.http.services.jackett.loadbalancer.server.port=9117

  transmission:
    image: linuxserver/transmission:latest
    container_name: transmission
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # - TRANSMISSION_WEB_HOME=/combustion-release/
      - USER=${TRANSMISSIONUSER}
      - PASS=${TRANSMISSIONPASS}
    volumes:
      - ${DOCKERDIR}/transmission/config:/config
      - /storage/data/torrents/downloads:/data/torrents/downloads
      - /storage/data/torrents/watch:/watch
      - /etc/localtime:/etc/localtime:ro
    network_mode: service:nordvpn #9091
    depends_on:
      - nordvpn
    healthcheck: # TODO: look to see if auto shutoff is possible?
      test: if [ `curl https://api.nordvpn.com/vpn/check/full | jq -r .status` ==  "Protected" ]; then echo "Protected"; exit 0; else echo "Unprotected"; exit 1; fi
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 80s
    labels:
      - traefik.enable=true
      - traefik.http.routers.transmission.rule=Host(`transmission.soleria.net`)
      - traefik.http.routers.transmission.tls.certresolver=le
      - traefik.http.services.transmission.loadbalancer.server.port=9091

  nzbhydra2:
    image: ghcr.io/linuxserver/nzbhydra2:latest
    container_name: nzbhydra2
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/hydra:/config
      - ${DOCKERDIR}/shared:/shared
    network_mode: service:nordvpn #5076
    depends_on:
      - nordvpn
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.nzbhydra.rule=Host(`nzbhydra.soleria.net`)
      - traefik.http.routers.nzbhydra.tls.certresolver=le
      - traefik.http.services.nzbhydra.loadbalancer.server.port=5076

  sabnzbd:
    image: linuxserver/sabnzbd:latest
    container_name: "sabnzbd"
    volumes:
      - ${DOCKERDIR}/sabnzbd:/config
      - ${DOCKERDIR}/shared:/shared
      - /storage/data/usenet/downloads/complete:/data/usenet/downloads/complete
      - /storage/data/usenet/downloads/incomplete:/data/usenet/downloads/incomplete
    restart: always
    network_mode: service:nordvpn #8080
    depends_on:
      - nordvpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.soleria.net`)
      - traefik.http.routers.sabnzbd.tls.certresolver=le
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: "sonarr"
    restart: always
    volumes:
      - ${DOCKERDIR}/sonarr:/config
      - ${DOCKERDIR}/shared:/shared
      - /storage/data:/data
      - "/etc/localtime:/etc/localtime:ro"
    network_mode: service:nordvpn #8989
    depends_on:
      - nordvpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.soleria.net`)
      - traefik.http.routers.sonarr.tls.certresolver=le
      - traefik.http.services.sonarr.loadbalancer.server.port=8989

  radarr:
    image: linuxserver/radarr:latest
    container_name: "radarr"
    restart: always
    volumes:
      - ${DOCKERDIR}/radarr:/config
      - ${DOCKERDIR}/shared:/shared
      - /storage/data:/data
      - "/etc/localtime:/etc/localtime:ro"
    network_mode: service:nordvpn #7878
    depends_on:
      - nordvpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.soleria.net`)
      - traefik.http.routers.radarr.tls.certresolver=le
      - traefik.http.services.radarr.loadbalancer.server.port=7878

  radarrStandups:
    image: linuxserver/radarr:latest
    container_name: "radarrStandups"
    restart: always
    volumes:
      - ${DOCKERDIR}/radarrStandups:/config
      - ${DOCKERDIR}/shared:/shared
      - /storage/data:/data
      - "/etc/localtime:/etc/localtime:ro"
    network_mode: service:nordvpn #7877
    depends_on:
      - nordvpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarrStandups.rule=Host(`radarrStandups.soleria.net`)
      - traefik.http.routers.radarrStandups.tls.certresolver=le
      - traefik.http.services.radarrStandups.loadbalancer.server.port=7877

  prowlarr:
    image: linuxserver/prowlarr:develop
    container_name: prowlarr
    restart: always
    volumes:
      - ${DOCKERDIR}/prowlarr:/config
    network_mode: service:nordvpn #9696
    depends_on:
      - nordvpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.soleria.net`)
      - traefik.http.routers.prowlarr.tls.certresolver=le
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696

  traefik:
    container_name: traefik
    image: traefik:latest
    networks:
      - reverseProxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DOCKERDIR}/traefik:/etc/traefik
    ports:
      - 80:80
      - 443:443
      - 8085:8080
    environment:
      - CF_DNS_API_TOKEN={{ cloudFlare.APIToken }}
    restart: unless-stopped

  heimdall:
    image: linuxserver/heimdall:latest
    container_name: heimdall
    networks:
      - reverseProxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/heimdall:/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.heimdall.rule=Host(`soleria.net`)
      - traefik.http.routers.heimdall.tls.certresolver=le
      - traefik.http.routers.heimdall.entrypoints=websecure

  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/bazarr:/config
      - /storage/data:/data #wrong location
      - /data/movies:/movies #wrong location
      - /data/tvshows:/tv #wrong location
    network_mode: service:nordvpn #6767
    depends_on:
      - nordvpn
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=Host(`bazarr.soleria.net`)
      - traefik.http.routers.bazarr.tls.certresolver=le
      - traefik.http.routers.bazarr.entrypoints=websecure
      - traefik.http.services.bazarr.loadbalancer.server.port=6767

  paperless-ngx:
    image: linuxserver/paperless-ngx:latest
    container_name: paperless-ngx
    networks:
      - reverseProxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - PAPERLESS_URL=https://paperless.soleria.net
    volumes:
      - ${DOCKERDIR}/paperless/config:/config
      - ${DOCKERDIR}/paperless/data:/data
    ports:
      - 8000:8000
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.paperless.rule=Host(`paperless.soleria.net`)
      - traefik.http.routers.paperless.tls.certresolver=le
      - traefik.http.routers.paperless.entrypoints=websecure
      - traefik.http.services.paperless.loadbalancer.server.port=8000

  lidarr:
    image: linuxserver/lidarr:latest
    container_name: "lidarr"
    volumes:
      - ${DOCKERDIR}/lidarr:/config
      - /storage/data:/data
    network_mode: service:nordvpn #8686
    depends_on:
      - nordvpn
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=Host(`lidarr.soleria.net`)
      - traefik.http.routers.lidarr.tls.certresolver=le
      - traefik.http.routers.lidarr.entrypoints=websecure
      - traefik.http.services.lidarr.loadbalancer.server.port=8686

  changedetection:
    image: ghcr.io/dgtlmoon/changedetection.io:latest
    container_name: changedetection
    hostname: changedetection
    volumes:
      - ${DOCKERDIR}/changedetection/datastore:/datastore
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - BASE_URL="https://changedetection.soleria.net"
      - PLAYWRIGHT_DRIVER_URL=ws://playwright-chrome:3000/
    networks:
      - reverseProxy
    ports:
      - 5000:5000
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.changedetection.rule=Host(`changedetection.soleria.net`)
      - traefik.http.routers.changedetection.tls.certresolver=le
      - traefik.http.routers.changedetection.entrypoints=websecure
      - traefik.http.services.changedetection.loadbalancer.server.port=5000

  playwright-chrome:
    hostname: playwright-chrome
    container_name: changedetection-playwright-chrome
    image: browserless/chrome
    restart: unless-stopped
    networks:
      - reverseProxy

  audiobookshelf:
    container_name: audiobookshelf
    image: ghcr.io/advplyr/audiobookshelf:latest
    environment:
      - AUDIOBOOKSHELF_UID=${PUID}
      - AUDIOBOOKSHELF_GID=${PGID}
    ports:
      - 13378:80
    volumes:
      - /storage/data/media/audiobooks:/audiobooks
      - /storage/data/media/podcasts:/podcasts
      - ${DOCKERDIR}/audiobookshelf/config:/config
      - ${DOCKERDIR}/audiobookshelf/metadata
    labels:
      - traefik.enable=true
      - traefik.http.routers.audiobookshelf.rule=Host(`audiobookshelf.soleria.net`)
      - traefik.http.routers.audiobookshelf.tls.certresolver=le
      - traefik.http.routers.audiobookshelf.entrypoints=websecure
      - traefik.http.services.audiobookshelf.loadbalancer.server.port=80
    networks:
      - reverseProxy

  # tandoor-db:
  #   image: postgres:11-alpine
  #   container_name: tandoor-db
  #   volumes:
  #     - ${DOCKERDIR}/tandoor/db:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   networks:
  #     - tandoor
  #   env_file:
  #     - ./.tandoor.env

  # tandoor:
  #   image: vabene1111/recipes
  #   container_name: tandoor
  #   hostname: tandoor
  #   volumes:
  #     - ${DOCKERDIR}/tandoor/static:/opt/recipes/staticfiles
  #     - ${DOCKERDIR}/tandoor/media:/opt/recipes/mediafiles
  #   depends_on:
  #     - tandoor-db
  #   restart: unless-stopped
  #   networks:
  #     - tandoor
  #   env_file:
  #     - ./.tandoor.env

  # tandoor-nginx:
  #   image: nginx:mainline-alpine
  #   container_name: tandoor-nginx
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.tandoor.rule=Host(`tandoor.soleria.net`)
  #     - traefik.http.routers.tandoor.tls.certresolver=le
  #     - traefik.http.routers.tandoor.entrypoints=websecure
  #     - traefik.http.services.tandoor.loadbalancer.server.port=80
  #   volumes:
  #     - ${DOCKERDIR}/tandoor/static:/static:ro
  #     - ${DOCKERDIR}/tandoor/media:/media:ro
  #     - ${DOCKERDIR}/tandoor/nginx/conf.d:/etc/nginx/conf.d:ro
  #   depends_on:
  #     - tandoor
  #   restart: unless-stopped
  #   networks:
  #     - tandoor
  #     - reverseProxy
  #   env_file:
  #     - ./.tandoor.env

  plex-meta-manager:
    image: "meisnate12/plex-meta-manager"
    container_name: "plex-meta-manager"
    volumes:
      - ${DOCKERDIR}/plexMetaManager:/config
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - PMM_RUN=TRUE
